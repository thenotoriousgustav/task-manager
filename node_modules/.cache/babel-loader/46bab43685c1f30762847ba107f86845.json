{"ast":null,"code":"import _slicedToArray from \"/Users/melissafrd/Documents/task-manager/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/melissafrd/Documents/task-manager/src/contexts/TaskListContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid';\nexport const TaskListContext = createContext();\n\nconst TaskListContextProvider = props => {\n  const initialState = JSON.parse(localStorage.getItem('tasks')) || [];\n\n  const _useState = useState(initialState),\n        _useState2 = _slicedToArray(_useState, 2),\n        tasks = _useState2[0],\n        setTasks = _useState2[1];\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        editItem = _useState4[0],\n        setEditItem = _useState4[1]; // Add tasks\n\n\n  const addTask = title => {\n    setTasks([...tasks, {\n      title,\n      id: uuid()\n    }]);\n  }; // Remove tasks\n\n\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // Clear tasks\n\n\n  const clearList = () => {\n    setTasks([]);\n  }; // Find task\n\n\n  const findItem = id => {\n    const item = tasks.find(task => task.id === id);\n    setEditItem(item);\n  }; // Edit task\n\n\n  const editTask = (title, id) => {\n    const newTasks = tasks.map(task => task.id === id ? {\n      title,\n      id\n    } : task);\n    console.log(newTasks);\n    setTasks(newTasks);\n    setEditItem(null);\n  };\n\n  return React.createElement(TaskListContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      removeTask,\n      clearList,\n      findItem,\n      editTask,\n      editItem\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default TaskListContextProvider;","map":{"version":3,"sources":["/Users/melissafrd/Documents/task-manager/src/contexts/TaskListContext.js"],"names":["React","createContext","useState","useEffect","uuid","TaskListContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","tasks","setTasks","setItem","stringify","editItem","setEditItem","addTask","title","id","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","console","log","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,MAAMC,eAAe,GAAGJ,aAAa,EAArC;;AAEP,MAAMK,uBAAuB,GAAGC,KAAK,IAAI;AACvC,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAAlE;;AADuC,oBAGbV,QAAQ,CAACM,YAAD,CAHK;AAAA;AAAA,QAGhCK,KAHgC;AAAA,QAGzBC,QAHyB;;AAKvCX,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAeH,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AALuC,qBASPX,QAAQ,CAAC,IAAD,CATD;AAAA;AAAA,QAShCe,QATgC;AAAA,QAStBC,WATsB,kBAWvC;;;AACA,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACvBN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEO,MAAAA,KAAF;AAASC,MAAAA,EAAE,EAAEjB,IAAI;AAAjB,KAAX,CAAD,CAAR;AACD,GAFD,CAZuC,CAgBvC;;;AACA,QAAMkB,UAAU,GAAGD,EAAE,IAAI;AACvBP,IAAAA,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAFD,CAjBuC,CAqBvC;;;AACA,QAAMI,SAAS,GAAG,MAAM;AACtBX,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAFD,CAtBuC,CA0BvC;;;AACA,QAAMY,QAAQ,GAAGL,EAAE,IAAI;AACrB,UAAMM,IAAI,GAAGd,KAAK,CAACe,IAAN,CAAWJ,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYA,EAA/B,CAAb;AAEAH,IAAAA,WAAW,CAACS,IAAD,CAAX;AACD,GAJD,CA3BuC,CAiCvC;;;AACA,QAAME,QAAQ,GAAG,CAACT,KAAD,EAAQC,EAAR,KAAe;AAC9B,UAAMS,QAAQ,GAAGjB,KAAK,CAACkB,GAAN,CAAUP,IAAI,IAAKA,IAAI,CAACH,EAAL,KAAYA,EAAZ,GAAiB;AAAED,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAjB,GAAiCG,IAApD,CAAjB;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEAhB,IAAAA,QAAQ,CAACgB,QAAD,CAAR;AACAZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAPD;;AASA,SACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLL,MAAAA,KADK;AAELM,MAAAA,OAFK;AAGLG,MAAAA,UAHK;AAILG,MAAAA,SAJK;AAKLC,MAAAA,QALK;AAMLG,MAAAA,QANK;AAOLZ,MAAAA;AAPK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGV,KAAK,CAAC2B,QAXT,CADF;AAeD,CA1DD;;AA4DA,eAAe5B,uBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\nimport uuid from 'uuid'\n\nexport const TaskListContext = createContext()\n\nconst TaskListContextProvider = props => {\n  const initialState = JSON.parse(localStorage.getItem('tasks')) || []\n\n  const [tasks, setTasks] = useState(initialState)\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }, [tasks])\n\n  const [editItem, setEditItem] = useState(null)\n\n  // Add tasks\n  const addTask = title => {\n    setTasks([...tasks, { title, id: uuid() }])\n  }\n\n  // Remove tasks\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id))\n  }\n\n  // Clear tasks\n  const clearList = () => {\n    setTasks([])\n  }\n\n  // Find task\n  const findItem = id => {\n    const item = tasks.find(task => task.id === id)\n\n    setEditItem(item)\n  }\n\n  // Edit task\n  const editTask = (title, id) => {\n    const newTasks = tasks.map(task => (task.id === id ? { title, id } : task))\n\n    console.log(newTasks)\n\n    setTasks(newTasks)\n    setEditItem(null)\n  }\n\n  return (\n    <TaskListContext.Provider\n      value={{\n        tasks,\n        addTask,\n        removeTask,\n        clearList,\n        findItem,\n        editTask,\n        editItem\n      }}\n    >\n      {props.children}\n    </TaskListContext.Provider>\n  )\n}\n\nexport default TaskListContextProvider\n"]},"metadata":{},"sourceType":"module"}